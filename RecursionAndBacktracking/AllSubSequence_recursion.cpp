/*
	<< Note : This is foundation problem, so it should be crystal clear to you for 
	your foundation of recursion >>
	All Possible Subsequences of a String
	- Learn how to print all the possible subsequences of a string using Recursion.

	Given a string, find out all its subsequences.
	
	Subsequence - A string is a subsequence of a given string that is 
	generated by deleting some character of a given string without changing its order.

	Solution: Recursive approach
	one by one, fixed characters and recursively generate all subsets starting from them. After every recursive call,
	we remove the last character ( backtrack ) so that the next permutation can be generated. 
	Let's do the implementation now...

*/

#define FORREF
#ifndef FORREF
using namespace std;
#include<iostream>

struct Subsequence {
	void subsequences(char input[], int input_ind, char output[], int output_ind) {
		// In recursion , the crucial step is to think the base or termination condition
		if (input[input_ind] == 0) { // 0 refreing here the null termination
			output[output_ind] = '\0';
			cout << output << endl;
			return;
		}
		output[output_ind] = input[input_ind];
		subsequences(input, input_ind + 1, output, output_ind + 1); // this is with inclusion of character
		subsequences(input, input_ind + 1, output, output_ind); // this is after backtrack of last step, meaning removal of last character
	}
};

int main() {
	char input[] = { 'a','b','c','\0' };
	char output[100];
	Subsequence ss;
	ss.subsequences(input, 0, output, 0);
	return 0;
}
#endif // FORREF

